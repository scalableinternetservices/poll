QUERY OPTIMIZATION NOTES:

== REMOVING RESULTS ==

Originally, we had the votes for an answer stored in a separate Result table. However, when looking at the results of a poll, it resulted in a query like the one below:

User Load (0.1ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 1  ORDER BY `users`.`id` ASC LIMIT 1
  PollQuestion Load (0.1ms)  SELECT  `poll_questions`.* FROM `poll_questions` WHERE `poll_questions`.`id` = 2 LIMIT 1
  Answer Load (0.1ms)  SELECT `answers`.* FROM `answers` WHERE `answers`.`poll_question_id` = 2
  Result Load (0.1ms)  SELECT `results`.* FROM `results` WHERE `results`.`answer_id` = 4
  Result Load (0.1ms)  SELECT `results`.* FROM `results` WHERE `results`.`answer_id` = 5
  Result Load (0.1ms)  SELECT `results`.* FROM `results` WHERE `results`.`answer_id` = 6
  Result Load (0.1ms)  SELECT `results`.* FROM `results` WHERE `results`.`answer_id` = 7
  Result Load (0.1ms)  SELECT `results`.* FROM `results` WHERE `results`.`answer_id` = 8
Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 0.7ms)

While normally we would opt to use the "includes" method to eliminate these extraneous queries to Result, we noticed that the Result table was entirely unnecessary. We therefore dropped the Result table and included the vote count in an Answer record, resulting in a much simpler query:

User Load (0.1ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 1  ORDER BY `users`.`id` ASC LIMIT 1
  PollQuestion Load (0.3ms)  SELECT  `poll_questions`.* FROM `poll_questions` WHERE `poll_questions`.`id` = 2 LIMIT 1
  Answer Load (0.2ms)  SELECT `answers`.* FROM `answers` WHERE `answers`.`poll_question_id` = 2
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.7ms)

The difference in time is not pronounced due to the small number of answers, but for longer polls this can save a lot of time.

Furthermore, this also helps when creating polls. Before, we had to explicitly create an additional Result record for each Answer, but now it is created alongside the Answer.

== VOTE SUBMISSION ==

Originally, the statements for adding a vote looked like this:

User Load (0.2ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 1  ORDER BY `users`.`id` ASC LIMIT 1
true  Answer Load (0.3ms)  SELECT  `answers`.* FROM `answers` WHERE `answers`.`id` = 3 LIMIT 1
  Answer Load (0.2ms)  SELECT  `answers`.* FROM `answers` WHERE `answers`.`id` = 4 LIMIT 1
  PollQuestion Load (0.1ms)  SELECT  `poll_questions`.* FROM `poll_questions` WHERE `poll_questions`.`id` = 1 LIMIT 1
  PollQuestion Load (0.1ms)  SELECT  `poll_questions`.* FROM `poll_questions` WHERE `poll_questions`.`id` = 2 LIMIT 1
  UserPoll Load (0.1ms)  SELECT  `user_polls`.* FROM `user_polls` WHERE `user_polls`.`id` = 1 LIMIT 1
  PollQuestion Load (0.1ms)  SELECT `poll_questions`.* FROM `poll_questions` WHERE `poll_questions`.`user_poll_id` = 1
11  UserVote Exists (0.1ms)  SELECT  1 AS one FROM `user_votes` WHERE `user_votes`.`user_id` = 1 AND `user_votes`.`user_poll_id` = 1 LIMIT 1
  CACHE (0.0ms)  SELECT  `answers`.* FROM `answers` WHERE `answers`.`id` = 3 LIMIT 1  [["id", "3"]]
   (0.1ms)  BEGIN
  SQL (0.3ms)  UPDATE `answers` SET `votes` = 14, `updated_at` = '2015-11-29 23:14:25' WHERE `answers`.`id` = 3
   (59.9ms)  COMMIT
  Answer Load (0.4ms)  SELECT  `answers`.* FROM `answers` WHERE `answers`.`id` = 4 LIMIT 1
   (0.3ms)  BEGIN
  SQL (0.4ms)  UPDATE `answers` SET `votes` = 13, `updated_at` = '2015-11-29 23:14:26' WHERE `answers`.`id` = 4
   (51.4ms)  COMMIT
   (0.2ms)  BEGIN
  SQL (0.3ms)  INSERT INTO `user_votes` (`user_id`, `user_poll_id`, `created_at`, `updated_at`) VALUES (1, 1, '2015-11-29 23:14:26', '2015-11-29 23:14:26')
   (50.6ms)  COMMIT

Notice the two COMMIT transactions, which take up a substantial amount of time. There is a commit for each update (one per answer, and one to keep track of the user's vote). We changed this to perform this all as one transaction, resulting in the following queries:

User Load (0.3ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
true  Answer Load (0.2ms)  SELECT  `answers`.* FROM `answers` WHERE `answers`.`id` = 1 LIMIT 1
  Answer Load (0.1ms)  SELECT  `answers`.* FROM `answers` WHERE `answers`.`id` = 4 LIMIT 1
  PollQuestion Load (0.2ms)  SELECT  `poll_questions`.* FROM `poll_questions` WHERE `poll_questions`.`id` = 1 LIMIT 1
  PollQuestion Load (0.2ms)  SELECT  `poll_questions`.* FROM `poll_questions` WHERE `poll_questions`.`id` = 2 LIMIT 1
  UserPoll Load (0.1ms)  SELECT  `user_polls`.* FROM `user_polls` WHERE `user_polls`.`id` = 1 LIMIT 1
  PollQuestion Load (0.2ms)  SELECT `poll_questions`.* FROM `poll_questions` WHERE `poll_questions`.`user_poll_id` = 1
11  UserVote Exists (0.2ms)  SELECT  1 AS one FROM `user_votes` WHERE `user_votes`.`user_id` = 2 AND `user_votes`.`user_poll_id` = 1 LIMIT 1
   (0.2ms)  BEGIN
  CACHE (0.0ms)  SELECT  `answers`.* FROM `answers` WHERE `answers`.`id` = 1 LIMIT 1  [["id", "1"]]
  SQL (0.4ms)  UPDATE `answers` SET `votes` = 25, `updated_at` = '2015-11-29 23:33:40' WHERE `answers`.`id` = 1
  Answer Load (0.3ms)  SELECT  `answers`.* FROM `answers` WHERE `answers`.`id` = 4 LIMIT 1
  SQL (0.3ms)  UPDATE `answers` SET `votes` = 14, `updated_at` = '2015-11-29 23:33:40' WHERE `answers`.`id` = 4
  SQL (27.7ms)  INSERT INTO `user_votes` (`user_id`, `user_poll_id`, `created_at`, `updated_at`) VALUES (2, 1, '2015-11-29 23:33:40', '2015-11-29 23:33:40')
   (87.2ms)  COMMIT

Although the commit takes longer (since it updates 2 tables), it is significantly faster due to congolmerating the updates to Answer as a single transaction.

== LANDING PAGE ==

One of the operations on the landing page is to show recently made polls. The information we decided to show on the landing page involves performing a join on the Users table. Unfortunately, the initial implementation we used resulted in queries that looked like this:

User Load (0.2ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  SharedPoll Load (0.1ms)  SELECT `shared_polls`.* FROM `shared_polls` WHERE `shared_polls`.`sharee_id` = 2
  UserPoll Load (0.1ms)  SELECT  `user_polls`.* FROM `user_polls` WHERE (`user_polls`.`user_id` != 2)  ORDER BY `user_polls`.`updated_at` DESC LIMIT 6
  UserPoll Load (0.1ms)  SELECT  `user_polls`.* FROM `user_polls` WHERE `user_polls`.`user_id` = 2  ORDER BY `user_polls`.`updated_at` DESC LIMIT 6
  Friendship Load (0.1ms)  SELECT `friendships`.* FROM `friendships` WHERE `friendships`.`user_id` = 2
  Friendship Load (0.1ms)  SELECT `friendships`.* FROM `friendships` WHERE `friendships`.`friend_id` = 2
  PendingFriendship Load (0.1ms)  SELECT `pending_friendships`.* FROM `pending_friendships` WHERE `pending_friendships`.`receiver_id` = 2
  Rendered shared/_navbar.html.erb (1.8ms)
  Rendered landing_page/_share_modal.html.erb (0.0ms)
  User Load (0.1ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 1992 LIMIT 1
  User Load (0.1ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 1994 LIMIT 1
  User Load (0.1ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 1996 LIMIT 1
  User Load (0.1ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 1993 LIMIT 1
  User Load (0.1ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 1995 LIMIT 1
  Rendered landing_page/_news_feed_polls.html.erb (6.0ms)
  Rendered landing_page/_current_user_polls.html.erb (4.5ms)
  Rendered landing_page/_friends_pane.html.erb (0.1ms)
  Rendered landing_page/index.html.erb within layouts/application (14.7ms)

Notice the multiple "User Load" queries. We can avoid the overhead of issuing multiple queries by pre-fetching this data as we gather the polls, resulting in a query like this:

User Load (0.2ms)  SELECT  `users`.* FROM `users` WHERE `users`.`id` = 2  ORDER BY `users`.`id` ASC LIMIT 1
  SharedPoll Load (0.1ms)  SELECT `shared_polls`.* FROM `shared_polls` WHERE `shared_polls`.`sharee_id` = 2
  UserPoll Load (0.1ms)  SELECT  `user_polls`.* FROM `user_polls` WHERE (`user_polls`.`user_id` != 2)  ORDER BY `user_polls`.`updated_at` DESC LIMIT 6
  User Load (0.2ms)  SELECT `users`.* FROM `users` WHERE `users`.`id` IN (1992, 1993, 1994, 1995, 1996, 1997)
  UserPoll Load (0.2ms)  SELECT  `user_polls`.* FROM `user_polls` WHERE `user_polls`.`user_id` = 2  ORDER BY `user_polls`.`updated_at` DESC LIMIT 6
  Friendship Load (0.1ms)  SELECT `friendships`.* FROM `friendships` WHERE `friendships`.`user_id` = 2
  Friendship Load (0.1ms)  SELECT `friendships`.* FROM `friendships` WHERE `friendships`.`friend_id` = 2
  PendingFriendship Load (0.1ms)  SELECT `pending_friendships`.* FROM `pending_friendships` WHERE `pending_friendships`.`receiver_id` = 2
  Rendered shared/_navbar.html.erb (2.0ms)
  Rendered landing_page/_share_modal.html.erb (0.0ms)
  Rendered landing_page/_news_feed_polls.html.erb (8.1ms)
  Rendered landing_page/_current_user_polls.html.erb (5.0ms)
  Rendered landing_page/_friends_pane.html.erb (0.1ms)
  Rendered landing_page/index.html.erb within layouts/application (17.5ms)
Completed 200 OK in 162ms (Views: 114.6ms | ActiveRecord: 6.4ms)

